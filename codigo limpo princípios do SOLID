// Interfaces para validação de email
public interface IEmailValidator
{
    bool IsValid(string email);
}

public interface IEmailFormatter : IEmailValidator
{
}

public interface IDomainValidator : IEmailValidator
{
}

public interface IMailServerValidator : IEmailValidator
{
}

// Classes concretas para validação de email
public class EmailFormatter : IEmailFormatter
{
    public bool IsValid(string email)
    {
        // Implementação da validação de formato de email
        try
        {
            new MailAddress(email);
            return true;
        }
        catch (FormatException)
        {
            return false;
        }
    }
}

public class DomainValidator : IDomainValidator
{
    public bool IsValid(string email)
    {
        // Implementação da validação de domínio
        try
        {
            string domain = email.Split('@')[1];
            IPHostEntry hostEntry = Dns.GetHostEntry(domain);
            return hostEntry.AddressList.Length > 0;
        }
        catch (Exception)
        {
            return false;
        }
    }
}

public class MailServerValidator : IMailServerValidator
{
    public bool IsValid(string email)
    {
        // Implementação da validação do servidor de email
        try
        {
            string domain = email.Split('@')[1];
            int port = 25; // Porta SMTP comum

            using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))
            {
                socket.Connect(new IPEndPoint(Dns.GetHostEntry(domain).AddressList[0], port));
                return socket.Connected;
            }
